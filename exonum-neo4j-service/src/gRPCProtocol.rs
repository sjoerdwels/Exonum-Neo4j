// This file is generated by rust-protobuf 2.2.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct TransactionRequest {
    // message fields
    pub UUID_prefix: ::std::string::String,
    pub queries: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl TransactionRequest {
    pub fn new() -> TransactionRequest {
        ::std::default::Default::default()
    }

    // string UUID_prefix = 1;

    pub fn clear_UUID_prefix(&mut self) {
        self.UUID_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_UUID_prefix(&mut self, v: ::std::string::String) {
        self.UUID_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_UUID_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.UUID_prefix
    }

    // Take field
    pub fn take_UUID_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.UUID_prefix, ::std::string::String::new())
    }

    pub fn get_UUID_prefix(&self) -> &str {
        &self.UUID_prefix
    }

    // repeated string queries = 2;

    pub fn clear_queries(&mut self) {
        self.queries.clear();
    }

    // Param is passed by value, moved
    pub fn set_queries(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.queries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_queries(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.queries
    }

    // Take field
    pub fn take_queries(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.queries, ::protobuf::RepeatedField::new())
    }

    pub fn get_queries(&self) -> &[::std::string::String] {
        &self.queries
    }
}

impl ::protobuf::Message for TransactionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.UUID_prefix)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.queries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.UUID_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.UUID_prefix);
        }
        for value in &self.queries {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.UUID_prefix.is_empty() {
            os.write_string(1, &self.UUID_prefix)?;
        }
        for v in &self.queries {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionRequest {
        TransactionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "UUID_prefix",
                    |m: &TransactionRequest| { &m.UUID_prefix },
                    |m: &mut TransactionRequest| { &mut m.UUID_prefix },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "queries",
                    |m: &TransactionRequest| { &m.queries },
                    |m: &mut TransactionRequest| { &mut m.queries },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionRequest>(
                    "TransactionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionRequest {
        static mut instance: ::protobuf::lazy::Lazy<TransactionRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionRequest,
        };
        unsafe {
            instance.get(TransactionRequest::new)
        }
    }
}

impl ::protobuf::Clear for TransactionRequest {
    fn clear(&mut self) {
        self.clear_UUID_prefix();
        self.clear_queries();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionResponse {
    // message fields
    pub result: Status,
    pub modifications: ::protobuf::SingularPtrField<DatabaseModifications>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl TransactionResponse {
    pub fn new() -> TransactionResponse {
        ::std::default::Default::default()
    }

    // .protobuf.Status result = 1;

    pub fn clear_result(&mut self) {
        self.result = Status::FAILURE;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: Status) {
        self.result = v;
    }

    pub fn get_result(&self) -> Status {
        self.result
    }

    // .protobuf.DatabaseModifications modifications = 2;

    pub fn clear_modifications(&mut self) {
        self.modifications.clear();
    }

    pub fn has_modifications(&self) -> bool {
        self.modifications.is_some()
    }

    // Param is passed by value, moved
    pub fn set_modifications(&mut self, v: DatabaseModifications) {
        self.modifications = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_modifications(&mut self) -> &mut DatabaseModifications {
        if self.modifications.is_none() {
            self.modifications.set_default();
        }
        self.modifications.as_mut().unwrap()
    }

    // Take field
    pub fn take_modifications(&mut self) -> DatabaseModifications {
        self.modifications.take().unwrap_or_else(|| DatabaseModifications::new())
    }

    pub fn get_modifications(&self) -> &DatabaseModifications {
        self.modifications.as_ref().unwrap_or_else(|| DatabaseModifications::default_instance())
    }
}

impl ::protobuf::Message for TransactionResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.modifications {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.modifications)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != Status::FAILURE {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if let Some(ref v) = self.modifications.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.result != Status::FAILURE {
            os.write_enum(1, self.result.value())?;
        }
        if let Some(ref v) = self.modifications.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionResponse {
        TransactionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Status>>(
                    "result",
                    |m: &TransactionResponse| { &m.result },
                    |m: &mut TransactionResponse| { &mut m.result },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DatabaseModifications>>(
                    "modifications",
                    |m: &TransactionResponse| { &m.modifications },
                    |m: &mut TransactionResponse| { &mut m.modifications },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionResponse>(
                    "TransactionResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionResponse {
        static mut instance: ::protobuf::lazy::Lazy<TransactionResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionResponse,
        };
        unsafe {
            instance.get(TransactionResponse::new)
        }
    }
}

impl ::protobuf::Clear for TransactionResponse {
    fn clear(&mut self) {
        self.clear_result();
        self.clear_modifications();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatabaseModifications {
    // message fields
    pub created_nodes: ::protobuf::RepeatedField<DatabaseModifications_CreatedNode>,
    pub created_relationships: ::protobuf::RepeatedField<DatabaseModifications_CreatedRelationShip>,
    pub assigned_labels: ::protobuf::RepeatedField<DatabaseModifications_AssignedLabel>,
    pub assigned_node_properties: ::protobuf::RepeatedField<DatabaseModifications_AssignedNodeProperty>,
    pub assigned_relationship_properties: ::protobuf::RepeatedField<DatabaseModifications_AssignedRelationshipProperty>,
    pub removed_relation_properties: ::protobuf::RepeatedField<DatabaseModifications_RemovedRelationshipProperty>,
    pub removed_node_properties: ::protobuf::RepeatedField<DatabaseModifications_RemovedNodeProperty>,
    pub removed_labels: ::protobuf::RepeatedField<DatabaseModifications_RemovedLabel>,
    pub deleted_relationships: ::protobuf::RepeatedField<DatabaseModifications_DeletedRelationship>,
    pub deleted_nodes: ::protobuf::RepeatedField<DatabaseModifications_DeletedNode>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DatabaseModifications {
    pub fn new() -> DatabaseModifications {
        ::std::default::Default::default()
    }

    // repeated .protobuf.DatabaseModifications.CreatedNode created_nodes = 1;

    pub fn clear_created_nodes(&mut self) {
        self.created_nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_created_nodes(&mut self, v: ::protobuf::RepeatedField<DatabaseModifications_CreatedNode>) {
        self.created_nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_created_nodes(&mut self) -> &mut ::protobuf::RepeatedField<DatabaseModifications_CreatedNode> {
        &mut self.created_nodes
    }

    // Take field
    pub fn take_created_nodes(&mut self) -> ::protobuf::RepeatedField<DatabaseModifications_CreatedNode> {
        ::std::mem::replace(&mut self.created_nodes, ::protobuf::RepeatedField::new())
    }

    pub fn get_created_nodes(&self) -> &[DatabaseModifications_CreatedNode] {
        &self.created_nodes
    }

    // repeated .protobuf.DatabaseModifications.CreatedRelationShip created_relationships = 2;

    pub fn clear_created_relationships(&mut self) {
        self.created_relationships.clear();
    }

    // Param is passed by value, moved
    pub fn set_created_relationships(&mut self, v: ::protobuf::RepeatedField<DatabaseModifications_CreatedRelationShip>) {
        self.created_relationships = v;
    }

    // Mutable pointer to the field.
    pub fn mut_created_relationships(&mut self) -> &mut ::protobuf::RepeatedField<DatabaseModifications_CreatedRelationShip> {
        &mut self.created_relationships
    }

    // Take field
    pub fn take_created_relationships(&mut self) -> ::protobuf::RepeatedField<DatabaseModifications_CreatedRelationShip> {
        ::std::mem::replace(&mut self.created_relationships, ::protobuf::RepeatedField::new())
    }

    pub fn get_created_relationships(&self) -> &[DatabaseModifications_CreatedRelationShip] {
        &self.created_relationships
    }

    // repeated .protobuf.DatabaseModifications.AssignedLabel assigned_labels = 3;

    pub fn clear_assigned_labels(&mut self) {
        self.assigned_labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_assigned_labels(&mut self, v: ::protobuf::RepeatedField<DatabaseModifications_AssignedLabel>) {
        self.assigned_labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_assigned_labels(&mut self) -> &mut ::protobuf::RepeatedField<DatabaseModifications_AssignedLabel> {
        &mut self.assigned_labels
    }

    // Take field
    pub fn take_assigned_labels(&mut self) -> ::protobuf::RepeatedField<DatabaseModifications_AssignedLabel> {
        ::std::mem::replace(&mut self.assigned_labels, ::protobuf::RepeatedField::new())
    }

    pub fn get_assigned_labels(&self) -> &[DatabaseModifications_AssignedLabel] {
        &self.assigned_labels
    }

    // repeated .protobuf.DatabaseModifications.AssignedNodeProperty assigned_node_properties = 4;

    pub fn clear_assigned_node_properties(&mut self) {
        self.assigned_node_properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_assigned_node_properties(&mut self, v: ::protobuf::RepeatedField<DatabaseModifications_AssignedNodeProperty>) {
        self.assigned_node_properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_assigned_node_properties(&mut self) -> &mut ::protobuf::RepeatedField<DatabaseModifications_AssignedNodeProperty> {
        &mut self.assigned_node_properties
    }

    // Take field
    pub fn take_assigned_node_properties(&mut self) -> ::protobuf::RepeatedField<DatabaseModifications_AssignedNodeProperty> {
        ::std::mem::replace(&mut self.assigned_node_properties, ::protobuf::RepeatedField::new())
    }

    pub fn get_assigned_node_properties(&self) -> &[DatabaseModifications_AssignedNodeProperty] {
        &self.assigned_node_properties
    }

    // repeated .protobuf.DatabaseModifications.AssignedRelationshipProperty assigned_relationship_properties = 5;

    pub fn clear_assigned_relationship_properties(&mut self) {
        self.assigned_relationship_properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_assigned_relationship_properties(&mut self, v: ::protobuf::RepeatedField<DatabaseModifications_AssignedRelationshipProperty>) {
        self.assigned_relationship_properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_assigned_relationship_properties(&mut self) -> &mut ::protobuf::RepeatedField<DatabaseModifications_AssignedRelationshipProperty> {
        &mut self.assigned_relationship_properties
    }

    // Take field
    pub fn take_assigned_relationship_properties(&mut self) -> ::protobuf::RepeatedField<DatabaseModifications_AssignedRelationshipProperty> {
        ::std::mem::replace(&mut self.assigned_relationship_properties, ::protobuf::RepeatedField::new())
    }

    pub fn get_assigned_relationship_properties(&self) -> &[DatabaseModifications_AssignedRelationshipProperty] {
        &self.assigned_relationship_properties
    }

    // repeated .protobuf.DatabaseModifications.RemovedRelationshipProperty removed_relation_properties = 6;

    pub fn clear_removed_relation_properties(&mut self) {
        self.removed_relation_properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_removed_relation_properties(&mut self, v: ::protobuf::RepeatedField<DatabaseModifications_RemovedRelationshipProperty>) {
        self.removed_relation_properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_removed_relation_properties(&mut self) -> &mut ::protobuf::RepeatedField<DatabaseModifications_RemovedRelationshipProperty> {
        &mut self.removed_relation_properties
    }

    // Take field
    pub fn take_removed_relation_properties(&mut self) -> ::protobuf::RepeatedField<DatabaseModifications_RemovedRelationshipProperty> {
        ::std::mem::replace(&mut self.removed_relation_properties, ::protobuf::RepeatedField::new())
    }

    pub fn get_removed_relation_properties(&self) -> &[DatabaseModifications_RemovedRelationshipProperty] {
        &self.removed_relation_properties
    }

    // repeated .protobuf.DatabaseModifications.RemovedNodeProperty removed_node_properties = 7;

    pub fn clear_removed_node_properties(&mut self) {
        self.removed_node_properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_removed_node_properties(&mut self, v: ::protobuf::RepeatedField<DatabaseModifications_RemovedNodeProperty>) {
        self.removed_node_properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_removed_node_properties(&mut self) -> &mut ::protobuf::RepeatedField<DatabaseModifications_RemovedNodeProperty> {
        &mut self.removed_node_properties
    }

    // Take field
    pub fn take_removed_node_properties(&mut self) -> ::protobuf::RepeatedField<DatabaseModifications_RemovedNodeProperty> {
        ::std::mem::replace(&mut self.removed_node_properties, ::protobuf::RepeatedField::new())
    }

    pub fn get_removed_node_properties(&self) -> &[DatabaseModifications_RemovedNodeProperty] {
        &self.removed_node_properties
    }

    // repeated .protobuf.DatabaseModifications.RemovedLabel removed_labels = 8;

    pub fn clear_removed_labels(&mut self) {
        self.removed_labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_removed_labels(&mut self, v: ::protobuf::RepeatedField<DatabaseModifications_RemovedLabel>) {
        self.removed_labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_removed_labels(&mut self) -> &mut ::protobuf::RepeatedField<DatabaseModifications_RemovedLabel> {
        &mut self.removed_labels
    }

    // Take field
    pub fn take_removed_labels(&mut self) -> ::protobuf::RepeatedField<DatabaseModifications_RemovedLabel> {
        ::std::mem::replace(&mut self.removed_labels, ::protobuf::RepeatedField::new())
    }

    pub fn get_removed_labels(&self) -> &[DatabaseModifications_RemovedLabel] {
        &self.removed_labels
    }

    // repeated .protobuf.DatabaseModifications.DeletedRelationship deleted_relationships = 9;

    pub fn clear_deleted_relationships(&mut self) {
        self.deleted_relationships.clear();
    }

    // Param is passed by value, moved
    pub fn set_deleted_relationships(&mut self, v: ::protobuf::RepeatedField<DatabaseModifications_DeletedRelationship>) {
        self.deleted_relationships = v;
    }

    // Mutable pointer to the field.
    pub fn mut_deleted_relationships(&mut self) -> &mut ::protobuf::RepeatedField<DatabaseModifications_DeletedRelationship> {
        &mut self.deleted_relationships
    }

    // Take field
    pub fn take_deleted_relationships(&mut self) -> ::protobuf::RepeatedField<DatabaseModifications_DeletedRelationship> {
        ::std::mem::replace(&mut self.deleted_relationships, ::protobuf::RepeatedField::new())
    }

    pub fn get_deleted_relationships(&self) -> &[DatabaseModifications_DeletedRelationship] {
        &self.deleted_relationships
    }

    // repeated .protobuf.DatabaseModifications.DeletedNode deleted_nodes = 10;

    pub fn clear_deleted_nodes(&mut self) {
        self.deleted_nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_deleted_nodes(&mut self, v: ::protobuf::RepeatedField<DatabaseModifications_DeletedNode>) {
        self.deleted_nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_deleted_nodes(&mut self) -> &mut ::protobuf::RepeatedField<DatabaseModifications_DeletedNode> {
        &mut self.deleted_nodes
    }

    // Take field
    pub fn take_deleted_nodes(&mut self) -> ::protobuf::RepeatedField<DatabaseModifications_DeletedNode> {
        ::std::mem::replace(&mut self.deleted_nodes, ::protobuf::RepeatedField::new())
    }

    pub fn get_deleted_nodes(&self) -> &[DatabaseModifications_DeletedNode] {
        &self.deleted_nodes
    }
}

impl ::protobuf::Message for DatabaseModifications {
    fn is_initialized(&self) -> bool {
        for v in &self.created_nodes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_relationships {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.assigned_labels {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.assigned_node_properties {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.assigned_relationship_properties {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.removed_relation_properties {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.removed_node_properties {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.removed_labels {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.deleted_relationships {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.deleted_nodes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.created_nodes)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.created_relationships)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.assigned_labels)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.assigned_node_properties)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.assigned_relationship_properties)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.removed_relation_properties)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.removed_node_properties)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.removed_labels)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.deleted_relationships)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.deleted_nodes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.created_nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.created_relationships {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.assigned_labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.assigned_node_properties {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.assigned_relationship_properties {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.removed_relation_properties {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.removed_node_properties {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.removed_labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.deleted_relationships {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.deleted_nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.created_nodes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.created_relationships {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.assigned_labels {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.assigned_node_properties {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.assigned_relationship_properties {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.removed_relation_properties {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.removed_node_properties {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.removed_labels {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.deleted_relationships {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.deleted_nodes {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatabaseModifications {
        DatabaseModifications::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DatabaseModifications_CreatedNode>>(
                    "created_nodes",
                    |m: &DatabaseModifications| { &m.created_nodes },
                    |m: &mut DatabaseModifications| { &mut m.created_nodes },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DatabaseModifications_CreatedRelationShip>>(
                    "created_relationships",
                    |m: &DatabaseModifications| { &m.created_relationships },
                    |m: &mut DatabaseModifications| { &mut m.created_relationships },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DatabaseModifications_AssignedLabel>>(
                    "assigned_labels",
                    |m: &DatabaseModifications| { &m.assigned_labels },
                    |m: &mut DatabaseModifications| { &mut m.assigned_labels },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DatabaseModifications_AssignedNodeProperty>>(
                    "assigned_node_properties",
                    |m: &DatabaseModifications| { &m.assigned_node_properties },
                    |m: &mut DatabaseModifications| { &mut m.assigned_node_properties },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DatabaseModifications_AssignedRelationshipProperty>>(
                    "assigned_relationship_properties",
                    |m: &DatabaseModifications| { &m.assigned_relationship_properties },
                    |m: &mut DatabaseModifications| { &mut m.assigned_relationship_properties },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DatabaseModifications_RemovedRelationshipProperty>>(
                    "removed_relation_properties",
                    |m: &DatabaseModifications| { &m.removed_relation_properties },
                    |m: &mut DatabaseModifications| { &mut m.removed_relation_properties },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DatabaseModifications_RemovedNodeProperty>>(
                    "removed_node_properties",
                    |m: &DatabaseModifications| { &m.removed_node_properties },
                    |m: &mut DatabaseModifications| { &mut m.removed_node_properties },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DatabaseModifications_RemovedLabel>>(
                    "removed_labels",
                    |m: &DatabaseModifications| { &m.removed_labels },
                    |m: &mut DatabaseModifications| { &mut m.removed_labels },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DatabaseModifications_DeletedRelationship>>(
                    "deleted_relationships",
                    |m: &DatabaseModifications| { &m.deleted_relationships },
                    |m: &mut DatabaseModifications| { &mut m.deleted_relationships },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DatabaseModifications_DeletedNode>>(
                    "deleted_nodes",
                    |m: &DatabaseModifications| { &m.deleted_nodes },
                    |m: &mut DatabaseModifications| { &mut m.deleted_nodes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DatabaseModifications>(
                    "DatabaseModifications",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DatabaseModifications {
        static mut instance: ::protobuf::lazy::Lazy<DatabaseModifications> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DatabaseModifications,
        };
        unsafe {
            instance.get(DatabaseModifications::new)
        }
    }
}

impl ::protobuf::Clear for DatabaseModifications {
    fn clear(&mut self) {
        self.clear_created_nodes();
        self.clear_created_relationships();
        self.clear_assigned_labels();
        self.clear_assigned_node_properties();
        self.clear_assigned_relationship_properties();
        self.clear_removed_relation_properties();
        self.clear_removed_node_properties();
        self.clear_removed_labels();
        self.clear_deleted_relationships();
        self.clear_deleted_nodes();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatabaseModifications {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseModifications {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatabaseModifications_CreatedNode {
    // message fields
    pub node_UUID: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DatabaseModifications_CreatedNode {
    pub fn new() -> DatabaseModifications_CreatedNode {
        ::std::default::Default::default()
    }

    // string node_UUID = 1;

    pub fn clear_node_UUID(&mut self) {
        self.node_UUID.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_UUID(&mut self, v: ::std::string::String) {
        self.node_UUID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_UUID(&mut self) -> &mut ::std::string::String {
        &mut self.node_UUID
    }

    // Take field
    pub fn take_node_UUID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_UUID, ::std::string::String::new())
    }

    pub fn get_node_UUID(&self) -> &str {
        &self.node_UUID
    }
}

impl ::protobuf::Message for DatabaseModifications_CreatedNode {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_UUID)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.node_UUID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_UUID);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.node_UUID.is_empty() {
            os.write_string(1, &self.node_UUID)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatabaseModifications_CreatedNode {
        DatabaseModifications_CreatedNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "node_UUID",
                    |m: &DatabaseModifications_CreatedNode| { &m.node_UUID },
                    |m: &mut DatabaseModifications_CreatedNode| { &mut m.node_UUID },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DatabaseModifications_CreatedNode>(
                    "DatabaseModifications_CreatedNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DatabaseModifications_CreatedNode {
        static mut instance: ::protobuf::lazy::Lazy<DatabaseModifications_CreatedNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DatabaseModifications_CreatedNode,
        };
        unsafe {
            instance.get(DatabaseModifications_CreatedNode::new)
        }
    }
}

impl ::protobuf::Clear for DatabaseModifications_CreatedNode {
    fn clear(&mut self) {
        self.clear_node_UUID();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatabaseModifications_CreatedNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseModifications_CreatedNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatabaseModifications_CreatedRelationShip {
    // message fields
    pub relationship_UUID: ::std::string::String,
    pub field_type: ::std::string::String,
    pub start_node_UUID: ::std::string::String,
    pub end_node_UUID: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DatabaseModifications_CreatedRelationShip {
    pub fn new() -> DatabaseModifications_CreatedRelationShip {
        ::std::default::Default::default()
    }

    // string relationship_UUID = 1;

    pub fn clear_relationship_UUID(&mut self) {
        self.relationship_UUID.clear();
    }

    // Param is passed by value, moved
    pub fn set_relationship_UUID(&mut self, v: ::std::string::String) {
        self.relationship_UUID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relationship_UUID(&mut self) -> &mut ::std::string::String {
        &mut self.relationship_UUID
    }

    // Take field
    pub fn take_relationship_UUID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relationship_UUID, ::std::string::String::new())
    }

    pub fn get_relationship_UUID(&self) -> &str {
        &self.relationship_UUID
    }

    // string type = 2;

    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }

    // string start_node_UUID = 3;

    pub fn clear_start_node_UUID(&mut self) {
        self.start_node_UUID.clear();
    }

    // Param is passed by value, moved
    pub fn set_start_node_UUID(&mut self, v: ::std::string::String) {
        self.start_node_UUID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_node_UUID(&mut self) -> &mut ::std::string::String {
        &mut self.start_node_UUID
    }

    // Take field
    pub fn take_start_node_UUID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.start_node_UUID, ::std::string::String::new())
    }

    pub fn get_start_node_UUID(&self) -> &str {
        &self.start_node_UUID
    }

    // string end_node_UUID = 4;

    pub fn clear_end_node_UUID(&mut self) {
        self.end_node_UUID.clear();
    }

    // Param is passed by value, moved
    pub fn set_end_node_UUID(&mut self, v: ::std::string::String) {
        self.end_node_UUID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_node_UUID(&mut self) -> &mut ::std::string::String {
        &mut self.end_node_UUID
    }

    // Take field
    pub fn take_end_node_UUID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.end_node_UUID, ::std::string::String::new())
    }

    pub fn get_end_node_UUID(&self) -> &str {
        &self.end_node_UUID
    }
}

impl ::protobuf::Message for DatabaseModifications_CreatedRelationShip {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relationship_UUID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.start_node_UUID)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.end_node_UUID)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.relationship_UUID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.relationship_UUID);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field_type);
        }
        if !self.start_node_UUID.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.start_node_UUID);
        }
        if !self.end_node_UUID.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.end_node_UUID);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.relationship_UUID.is_empty() {
            os.write_string(1, &self.relationship_UUID)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(2, &self.field_type)?;
        }
        if !self.start_node_UUID.is_empty() {
            os.write_string(3, &self.start_node_UUID)?;
        }
        if !self.end_node_UUID.is_empty() {
            os.write_string(4, &self.end_node_UUID)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatabaseModifications_CreatedRelationShip {
        DatabaseModifications_CreatedRelationShip::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "relationship_UUID",
                    |m: &DatabaseModifications_CreatedRelationShip| { &m.relationship_UUID },
                    |m: &mut DatabaseModifications_CreatedRelationShip| { &mut m.relationship_UUID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &DatabaseModifications_CreatedRelationShip| { &m.field_type },
                    |m: &mut DatabaseModifications_CreatedRelationShip| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "start_node_UUID",
                    |m: &DatabaseModifications_CreatedRelationShip| { &m.start_node_UUID },
                    |m: &mut DatabaseModifications_CreatedRelationShip| { &mut m.start_node_UUID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "end_node_UUID",
                    |m: &DatabaseModifications_CreatedRelationShip| { &m.end_node_UUID },
                    |m: &mut DatabaseModifications_CreatedRelationShip| { &mut m.end_node_UUID },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DatabaseModifications_CreatedRelationShip>(
                    "DatabaseModifications_CreatedRelationShip",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DatabaseModifications_CreatedRelationShip {
        static mut instance: ::protobuf::lazy::Lazy<DatabaseModifications_CreatedRelationShip> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DatabaseModifications_CreatedRelationShip,
        };
        unsafe {
            instance.get(DatabaseModifications_CreatedRelationShip::new)
        }
    }
}

impl ::protobuf::Clear for DatabaseModifications_CreatedRelationShip {
    fn clear(&mut self) {
        self.clear_relationship_UUID();
        self.clear_field_type();
        self.clear_start_node_UUID();
        self.clear_end_node_UUID();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatabaseModifications_CreatedRelationShip {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseModifications_CreatedRelationShip {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatabaseModifications_AssignedLabel {
    // message fields
    pub node_UUID: ::std::string::String,
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DatabaseModifications_AssignedLabel {
    pub fn new() -> DatabaseModifications_AssignedLabel {
        ::std::default::Default::default()
    }

    // string node_UUID = 1;

    pub fn clear_node_UUID(&mut self) {
        self.node_UUID.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_UUID(&mut self, v: ::std::string::String) {
        self.node_UUID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_UUID(&mut self) -> &mut ::std::string::String {
        &mut self.node_UUID
    }

    // Take field
    pub fn take_node_UUID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_UUID, ::std::string::String::new())
    }

    pub fn get_node_UUID(&self) -> &str {
        &self.node_UUID
    }

    // string name = 2;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }
}

impl ::protobuf::Message for DatabaseModifications_AssignedLabel {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_UUID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.node_UUID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_UUID);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.node_UUID.is_empty() {
            os.write_string(1, &self.node_UUID)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatabaseModifications_AssignedLabel {
        DatabaseModifications_AssignedLabel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "node_UUID",
                    |m: &DatabaseModifications_AssignedLabel| { &m.node_UUID },
                    |m: &mut DatabaseModifications_AssignedLabel| { &mut m.node_UUID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &DatabaseModifications_AssignedLabel| { &m.name },
                    |m: &mut DatabaseModifications_AssignedLabel| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DatabaseModifications_AssignedLabel>(
                    "DatabaseModifications_AssignedLabel",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DatabaseModifications_AssignedLabel {
        static mut instance: ::protobuf::lazy::Lazy<DatabaseModifications_AssignedLabel> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DatabaseModifications_AssignedLabel,
        };
        unsafe {
            instance.get(DatabaseModifications_AssignedLabel::new)
        }
    }
}

impl ::protobuf::Clear for DatabaseModifications_AssignedLabel {
    fn clear(&mut self) {
        self.clear_node_UUID();
        self.clear_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatabaseModifications_AssignedLabel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseModifications_AssignedLabel {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatabaseModifications_AssignedNodeProperty {
    // message fields
    pub node_UUID: ::std::string::String,
    pub key: ::std::string::String,
    pub previous_value: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DatabaseModifications_AssignedNodeProperty {
    pub fn new() -> DatabaseModifications_AssignedNodeProperty {
        ::std::default::Default::default()
    }

    // string node_UUID = 1;

    pub fn clear_node_UUID(&mut self) {
        self.node_UUID.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_UUID(&mut self, v: ::std::string::String) {
        self.node_UUID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_UUID(&mut self) -> &mut ::std::string::String {
        &mut self.node_UUID
    }

    // Take field
    pub fn take_node_UUID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_UUID, ::std::string::String::new())
    }

    pub fn get_node_UUID(&self) -> &str {
        &self.node_UUID
    }

    // string key = 2;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    pub fn get_key(&self) -> &str {
        &self.key
    }

    // string previous_value = 3;

    pub fn clear_previous_value(&mut self) {
        self.previous_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_value(&mut self, v: ::std::string::String) {
        self.previous_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_value(&mut self) -> &mut ::std::string::String {
        &mut self.previous_value
    }

    // Take field
    pub fn take_previous_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.previous_value, ::std::string::String::new())
    }

    pub fn get_previous_value(&self) -> &str {
        &self.previous_value
    }

    // string value = 4;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    pub fn get_value(&self) -> &str {
        &self.value
    }
}

impl ::protobuf::Message for DatabaseModifications_AssignedNodeProperty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_UUID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.previous_value)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.node_UUID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_UUID);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        if !self.previous_value.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.previous_value);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.node_UUID.is_empty() {
            os.write_string(1, &self.node_UUID)?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        if !self.previous_value.is_empty() {
            os.write_string(3, &self.previous_value)?;
        }
        if !self.value.is_empty() {
            os.write_string(4, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatabaseModifications_AssignedNodeProperty {
        DatabaseModifications_AssignedNodeProperty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "node_UUID",
                    |m: &DatabaseModifications_AssignedNodeProperty| { &m.node_UUID },
                    |m: &mut DatabaseModifications_AssignedNodeProperty| { &mut m.node_UUID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &DatabaseModifications_AssignedNodeProperty| { &m.key },
                    |m: &mut DatabaseModifications_AssignedNodeProperty| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "previous_value",
                    |m: &DatabaseModifications_AssignedNodeProperty| { &m.previous_value },
                    |m: &mut DatabaseModifications_AssignedNodeProperty| { &mut m.previous_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &DatabaseModifications_AssignedNodeProperty| { &m.value },
                    |m: &mut DatabaseModifications_AssignedNodeProperty| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DatabaseModifications_AssignedNodeProperty>(
                    "DatabaseModifications_AssignedNodeProperty",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DatabaseModifications_AssignedNodeProperty {
        static mut instance: ::protobuf::lazy::Lazy<DatabaseModifications_AssignedNodeProperty> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DatabaseModifications_AssignedNodeProperty,
        };
        unsafe {
            instance.get(DatabaseModifications_AssignedNodeProperty::new)
        }
    }
}

impl ::protobuf::Clear for DatabaseModifications_AssignedNodeProperty {
    fn clear(&mut self) {
        self.clear_node_UUID();
        self.clear_key();
        self.clear_previous_value();
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatabaseModifications_AssignedNodeProperty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseModifications_AssignedNodeProperty {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatabaseModifications_AssignedRelationshipProperty {
    // message fields
    pub relationship_UUID: ::std::string::String,
    pub key: ::std::string::String,
    pub previous_value: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DatabaseModifications_AssignedRelationshipProperty {
    pub fn new() -> DatabaseModifications_AssignedRelationshipProperty {
        ::std::default::Default::default()
    }

    // string relationship_UUID = 1;

    pub fn clear_relationship_UUID(&mut self) {
        self.relationship_UUID.clear();
    }

    // Param is passed by value, moved
    pub fn set_relationship_UUID(&mut self, v: ::std::string::String) {
        self.relationship_UUID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relationship_UUID(&mut self) -> &mut ::std::string::String {
        &mut self.relationship_UUID
    }

    // Take field
    pub fn take_relationship_UUID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relationship_UUID, ::std::string::String::new())
    }

    pub fn get_relationship_UUID(&self) -> &str {
        &self.relationship_UUID
    }

    // string key = 2;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    pub fn get_key(&self) -> &str {
        &self.key
    }

    // string previous_value = 3;

    pub fn clear_previous_value(&mut self) {
        self.previous_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_value(&mut self, v: ::std::string::String) {
        self.previous_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_value(&mut self) -> &mut ::std::string::String {
        &mut self.previous_value
    }

    // Take field
    pub fn take_previous_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.previous_value, ::std::string::String::new())
    }

    pub fn get_previous_value(&self) -> &str {
        &self.previous_value
    }

    // string value = 4;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    pub fn get_value(&self) -> &str {
        &self.value
    }
}

impl ::protobuf::Message for DatabaseModifications_AssignedRelationshipProperty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relationship_UUID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.previous_value)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.relationship_UUID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.relationship_UUID);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        if !self.previous_value.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.previous_value);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.relationship_UUID.is_empty() {
            os.write_string(1, &self.relationship_UUID)?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        if !self.previous_value.is_empty() {
            os.write_string(3, &self.previous_value)?;
        }
        if !self.value.is_empty() {
            os.write_string(4, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatabaseModifications_AssignedRelationshipProperty {
        DatabaseModifications_AssignedRelationshipProperty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "relationship_UUID",
                    |m: &DatabaseModifications_AssignedRelationshipProperty| { &m.relationship_UUID },
                    |m: &mut DatabaseModifications_AssignedRelationshipProperty| { &mut m.relationship_UUID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &DatabaseModifications_AssignedRelationshipProperty| { &m.key },
                    |m: &mut DatabaseModifications_AssignedRelationshipProperty| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "previous_value",
                    |m: &DatabaseModifications_AssignedRelationshipProperty| { &m.previous_value },
                    |m: &mut DatabaseModifications_AssignedRelationshipProperty| { &mut m.previous_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &DatabaseModifications_AssignedRelationshipProperty| { &m.value },
                    |m: &mut DatabaseModifications_AssignedRelationshipProperty| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DatabaseModifications_AssignedRelationshipProperty>(
                    "DatabaseModifications_AssignedRelationshipProperty",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DatabaseModifications_AssignedRelationshipProperty {
        static mut instance: ::protobuf::lazy::Lazy<DatabaseModifications_AssignedRelationshipProperty> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DatabaseModifications_AssignedRelationshipProperty,
        };
        unsafe {
            instance.get(DatabaseModifications_AssignedRelationshipProperty::new)
        }
    }
}

impl ::protobuf::Clear for DatabaseModifications_AssignedRelationshipProperty {
    fn clear(&mut self) {
        self.clear_relationship_UUID();
        self.clear_key();
        self.clear_previous_value();
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatabaseModifications_AssignedRelationshipProperty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseModifications_AssignedRelationshipProperty {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatabaseModifications_RemovedRelationshipProperty {
    // message fields
    pub relationship_UUID: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DatabaseModifications_RemovedRelationshipProperty {
    pub fn new() -> DatabaseModifications_RemovedRelationshipProperty {
        ::std::default::Default::default()
    }

    // string relationship_UUID = 1;

    pub fn clear_relationship_UUID(&mut self) {
        self.relationship_UUID.clear();
    }

    // Param is passed by value, moved
    pub fn set_relationship_UUID(&mut self, v: ::std::string::String) {
        self.relationship_UUID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relationship_UUID(&mut self) -> &mut ::std::string::String {
        &mut self.relationship_UUID
    }

    // Take field
    pub fn take_relationship_UUID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relationship_UUID, ::std::string::String::new())
    }

    pub fn get_relationship_UUID(&self) -> &str {
        &self.relationship_UUID
    }
}

impl ::protobuf::Message for DatabaseModifications_RemovedRelationshipProperty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relationship_UUID)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.relationship_UUID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.relationship_UUID);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.relationship_UUID.is_empty() {
            os.write_string(1, &self.relationship_UUID)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatabaseModifications_RemovedRelationshipProperty {
        DatabaseModifications_RemovedRelationshipProperty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "relationship_UUID",
                    |m: &DatabaseModifications_RemovedRelationshipProperty| { &m.relationship_UUID },
                    |m: &mut DatabaseModifications_RemovedRelationshipProperty| { &mut m.relationship_UUID },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DatabaseModifications_RemovedRelationshipProperty>(
                    "DatabaseModifications_RemovedRelationshipProperty",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DatabaseModifications_RemovedRelationshipProperty {
        static mut instance: ::protobuf::lazy::Lazy<DatabaseModifications_RemovedRelationshipProperty> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DatabaseModifications_RemovedRelationshipProperty,
        };
        unsafe {
            instance.get(DatabaseModifications_RemovedRelationshipProperty::new)
        }
    }
}

impl ::protobuf::Clear for DatabaseModifications_RemovedRelationshipProperty {
    fn clear(&mut self) {
        self.clear_relationship_UUID();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatabaseModifications_RemovedRelationshipProperty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseModifications_RemovedRelationshipProperty {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatabaseModifications_RemovedNodeProperty {
    // message fields
    pub node_UUID: ::std::string::String,
    pub key: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DatabaseModifications_RemovedNodeProperty {
    pub fn new() -> DatabaseModifications_RemovedNodeProperty {
        ::std::default::Default::default()
    }

    // string node_UUID = 1;

    pub fn clear_node_UUID(&mut self) {
        self.node_UUID.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_UUID(&mut self, v: ::std::string::String) {
        self.node_UUID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_UUID(&mut self) -> &mut ::std::string::String {
        &mut self.node_UUID
    }

    // Take field
    pub fn take_node_UUID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_UUID, ::std::string::String::new())
    }

    pub fn get_node_UUID(&self) -> &str {
        &self.node_UUID
    }

    // string key = 2;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    pub fn get_key(&self) -> &str {
        &self.key
    }
}

impl ::protobuf::Message for DatabaseModifications_RemovedNodeProperty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_UUID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.node_UUID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_UUID);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.node_UUID.is_empty() {
            os.write_string(1, &self.node_UUID)?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatabaseModifications_RemovedNodeProperty {
        DatabaseModifications_RemovedNodeProperty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "node_UUID",
                    |m: &DatabaseModifications_RemovedNodeProperty| { &m.node_UUID },
                    |m: &mut DatabaseModifications_RemovedNodeProperty| { &mut m.node_UUID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &DatabaseModifications_RemovedNodeProperty| { &m.key },
                    |m: &mut DatabaseModifications_RemovedNodeProperty| { &mut m.key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DatabaseModifications_RemovedNodeProperty>(
                    "DatabaseModifications_RemovedNodeProperty",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DatabaseModifications_RemovedNodeProperty {
        static mut instance: ::protobuf::lazy::Lazy<DatabaseModifications_RemovedNodeProperty> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DatabaseModifications_RemovedNodeProperty,
        };
        unsafe {
            instance.get(DatabaseModifications_RemovedNodeProperty::new)
        }
    }
}

impl ::protobuf::Clear for DatabaseModifications_RemovedNodeProperty {
    fn clear(&mut self) {
        self.clear_node_UUID();
        self.clear_key();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatabaseModifications_RemovedNodeProperty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseModifications_RemovedNodeProperty {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatabaseModifications_RemovedLabel {
    // message fields
    pub node_UUID: ::std::string::String,
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DatabaseModifications_RemovedLabel {
    pub fn new() -> DatabaseModifications_RemovedLabel {
        ::std::default::Default::default()
    }

    // string node_UUID = 1;

    pub fn clear_node_UUID(&mut self) {
        self.node_UUID.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_UUID(&mut self, v: ::std::string::String) {
        self.node_UUID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_UUID(&mut self) -> &mut ::std::string::String {
        &mut self.node_UUID
    }

    // Take field
    pub fn take_node_UUID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_UUID, ::std::string::String::new())
    }

    pub fn get_node_UUID(&self) -> &str {
        &self.node_UUID
    }

    // string name = 2;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }
}

impl ::protobuf::Message for DatabaseModifications_RemovedLabel {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_UUID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.node_UUID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_UUID);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.node_UUID.is_empty() {
            os.write_string(1, &self.node_UUID)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatabaseModifications_RemovedLabel {
        DatabaseModifications_RemovedLabel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "node_UUID",
                    |m: &DatabaseModifications_RemovedLabel| { &m.node_UUID },
                    |m: &mut DatabaseModifications_RemovedLabel| { &mut m.node_UUID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &DatabaseModifications_RemovedLabel| { &m.name },
                    |m: &mut DatabaseModifications_RemovedLabel| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DatabaseModifications_RemovedLabel>(
                    "DatabaseModifications_RemovedLabel",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DatabaseModifications_RemovedLabel {
        static mut instance: ::protobuf::lazy::Lazy<DatabaseModifications_RemovedLabel> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DatabaseModifications_RemovedLabel,
        };
        unsafe {
            instance.get(DatabaseModifications_RemovedLabel::new)
        }
    }
}

impl ::protobuf::Clear for DatabaseModifications_RemovedLabel {
    fn clear(&mut self) {
        self.clear_node_UUID();
        self.clear_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatabaseModifications_RemovedLabel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseModifications_RemovedLabel {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatabaseModifications_DeletedRelationship {
    // message fields
    pub relationship_UUID: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DatabaseModifications_DeletedRelationship {
    pub fn new() -> DatabaseModifications_DeletedRelationship {
        ::std::default::Default::default()
    }

    // string relationship_UUID = 1;

    pub fn clear_relationship_UUID(&mut self) {
        self.relationship_UUID.clear();
    }

    // Param is passed by value, moved
    pub fn set_relationship_UUID(&mut self, v: ::std::string::String) {
        self.relationship_UUID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relationship_UUID(&mut self) -> &mut ::std::string::String {
        &mut self.relationship_UUID
    }

    // Take field
    pub fn take_relationship_UUID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relationship_UUID, ::std::string::String::new())
    }

    pub fn get_relationship_UUID(&self) -> &str {
        &self.relationship_UUID
    }
}

impl ::protobuf::Message for DatabaseModifications_DeletedRelationship {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relationship_UUID)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.relationship_UUID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.relationship_UUID);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.relationship_UUID.is_empty() {
            os.write_string(1, &self.relationship_UUID)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatabaseModifications_DeletedRelationship {
        DatabaseModifications_DeletedRelationship::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "relationship_UUID",
                    |m: &DatabaseModifications_DeletedRelationship| { &m.relationship_UUID },
                    |m: &mut DatabaseModifications_DeletedRelationship| { &mut m.relationship_UUID },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DatabaseModifications_DeletedRelationship>(
                    "DatabaseModifications_DeletedRelationship",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DatabaseModifications_DeletedRelationship {
        static mut instance: ::protobuf::lazy::Lazy<DatabaseModifications_DeletedRelationship> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DatabaseModifications_DeletedRelationship,
        };
        unsafe {
            instance.get(DatabaseModifications_DeletedRelationship::new)
        }
    }
}

impl ::protobuf::Clear for DatabaseModifications_DeletedRelationship {
    fn clear(&mut self) {
        self.clear_relationship_UUID();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatabaseModifications_DeletedRelationship {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseModifications_DeletedRelationship {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatabaseModifications_DeletedNode {
    // message fields
    pub node_UUID: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DatabaseModifications_DeletedNode {
    pub fn new() -> DatabaseModifications_DeletedNode {
        ::std::default::Default::default()
    }

    // string node_UUID = 1;

    pub fn clear_node_UUID(&mut self) {
        self.node_UUID.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_UUID(&mut self, v: ::std::string::String) {
        self.node_UUID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_UUID(&mut self) -> &mut ::std::string::String {
        &mut self.node_UUID
    }

    // Take field
    pub fn take_node_UUID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_UUID, ::std::string::String::new())
    }

    pub fn get_node_UUID(&self) -> &str {
        &self.node_UUID
    }
}

impl ::protobuf::Message for DatabaseModifications_DeletedNode {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_UUID)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.node_UUID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_UUID);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.node_UUID.is_empty() {
            os.write_string(1, &self.node_UUID)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatabaseModifications_DeletedNode {
        DatabaseModifications_DeletedNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "node_UUID",
                    |m: &DatabaseModifications_DeletedNode| { &m.node_UUID },
                    |m: &mut DatabaseModifications_DeletedNode| { &mut m.node_UUID },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DatabaseModifications_DeletedNode>(
                    "DatabaseModifications_DeletedNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DatabaseModifications_DeletedNode {
        static mut instance: ::protobuf::lazy::Lazy<DatabaseModifications_DeletedNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DatabaseModifications_DeletedNode,
        };
        unsafe {
            instance.get(DatabaseModifications_DeletedNode::new)
        }
    }
}

impl ::protobuf::Clear for DatabaseModifications_DeletedNode {
    fn clear(&mut self) {
        self.clear_node_UUID();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatabaseModifications_DeletedNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseModifications_DeletedNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Status {
    FAILURE = 0,
    SUCCESS = 1,
}

impl ::protobuf::ProtobufEnum for Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Status> {
        match value {
            0 => ::std::option::Option::Some(Status::FAILURE),
            1 => ::std::option::Option::Some(Status::SUCCESS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Status] = &[
            Status::FAILURE,
            Status::SUCCESS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Status {
}

impl ::std::default::Default for Status {
    fn default() -> Self {
        Status::FAILURE
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12gRPCProtocol.proto\x12\x08protobuf\"O\n\x12TransactionRequest\x12\
    \x1f\n\x0bUUID_prefix\x18\x01\x20\x01(\tR\nuUIDPrefix\x12\x18\n\x07queri\
    es\x18\x02\x20\x03(\tR\x07queries\"\x86\x01\n\x13TransactionResponse\x12\
    (\n\x06result\x18\x01\x20\x01(\x0e2\x10.protobuf.StatusR\x06result\x12E\
    \n\rmodifications\x18\x02\x20\x01(\x0b2\x1f.protobuf.DatabaseModificatio\
    nsR\rmodifications\"\x97\x0f\n\x15DatabaseModifications\x12P\n\rcreated_\
    nodes\x18\x01\x20\x03(\x0b2+.protobuf.DatabaseModifications.CreatedNodeR\
    \x0ccreatedNodes\x12h\n\x15created_relationships\x18\x02\x20\x03(\x0b23.\
    protobuf.DatabaseModifications.CreatedRelationShipR\x14createdRelationsh\
    ips\x12V\n\x0fassigned_labels\x18\x03\x20\x03(\x0b2-.protobuf.DatabaseMo\
    difications.AssignedLabelR\x0eassignedLabels\x12n\n\x18assigned_node_pro\
    perties\x18\x04\x20\x03(\x0b24.protobuf.DatabaseModifications.AssignedNo\
    dePropertyR\x16assignedNodeProperties\x12\x86\x01\n\x20assigned_relation\
    ship_properties\x18\x05\x20\x03(\x0b2<.protobuf.DatabaseModifications.As\
    signedRelationshipPropertyR\x1eassignedRelationshipProperties\x12{\n\x1b\
    removed_relation_properties\x18\x06\x20\x03(\x0b2;.protobuf.DatabaseModi\
    fications.RemovedRelationshipPropertyR\x19removedRelationProperties\x12k\
    \n\x17removed_node_properties\x18\x07\x20\x03(\x0b23.protobuf.DatabaseMo\
    difications.RemovedNodePropertyR\x15removedNodeProperties\x12S\n\x0eremo\
    ved_labels\x18\x08\x20\x03(\x0b2,.protobuf.DatabaseModifications.Removed\
    LabelR\rremovedLabels\x12h\n\x15deleted_relationships\x18\t\x20\x03(\x0b\
    23.protobuf.DatabaseModifications.DeletedRelationshipR\x14deletedRelatio\
    nships\x12P\n\rdeleted_nodes\x18\n\x20\x03(\x0b2+.protobuf.DatabaseModif\
    ications.DeletedNodeR\x0cdeletedNodes\x1a*\n\x0bCreatedNode\x12\x1b\n\tn\
    ode_UUID\x18\x01\x20\x01(\tR\x08nodeUUID\x1a\xa2\x01\n\x13CreatedRelatio\
    nShip\x12+\n\x11relationship_UUID\x18\x01\x20\x01(\tR\x10relationshipUUI\
    D\x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x12&\n\x0fstart_node_UUI\
    D\x18\x03\x20\x01(\tR\rstartNodeUUID\x12\"\n\rend_node_UUID\x18\x04\x20\
    \x01(\tR\x0bendNodeUUID\x1a@\n\rAssignedLabel\x12\x1b\n\tnode_UUID\x18\
    \x01\x20\x01(\tR\x08nodeUUID\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04na\
    me\x1a\x82\x01\n\x14AssignedNodeProperty\x12\x1b\n\tnode_UUID\x18\x01\
    \x20\x01(\tR\x08nodeUUID\x12\x10\n\x03key\x18\x02\x20\x01(\tR\x03key\x12\
    %\n\x0eprevious_value\x18\x03\x20\x01(\tR\rpreviousValue\x12\x14\n\x05va\
    lue\x18\x04\x20\x01(\tR\x05value\x1a\x9a\x01\n\x1cAssignedRelationshipPr\
    operty\x12+\n\x11relationship_UUID\x18\x01\x20\x01(\tR\x10relationshipUU\
    ID\x12\x10\n\x03key\x18\x02\x20\x01(\tR\x03key\x12%\n\x0eprevious_value\
    \x18\x03\x20\x01(\tR\rpreviousValue\x12\x14\n\x05value\x18\x04\x20\x01(\
    \tR\x05value\x1aJ\n\x1bRemovedRelationshipProperty\x12+\n\x11relationshi\
    p_UUID\x18\x01\x20\x01(\tR\x10relationshipUUID\x1aD\n\x13RemovedNodeProp\
    erty\x12\x1b\n\tnode_UUID\x18\x01\x20\x01(\tR\x08nodeUUID\x12\x10\n\x03k\
    ey\x18\x02\x20\x01(\tR\x03key\x1a?\n\x0cRemovedLabel\x12\x1b\n\tnode_UUI\
    D\x18\x01\x20\x01(\tR\x08nodeUUID\x12\x12\n\x04name\x18\x02\x20\x01(\tR\
    \x04name\x1aB\n\x13DeletedRelationship\x12+\n\x11relationship_UUID\x18\
    \x01\x20\x01(\tR\x10relationshipUUID\x1a*\n\x0bDeletedNode\x12\x1b\n\tno\
    de_UUID\x18\x01\x20\x01(\tR\x08nodeUUID*\"\n\x06Status\x12\x0b\n\x07FAIL\
    URE\x10\0\x12\x0b\n\x07SUCCESS\x10\x012\xbd\x01\n\x12TransactionManager\
    \x12R\n\x11VerifyTransaction\x12\x1c.protobuf.TransactionRequest\x1a\x1d\
    .protobuf.TransactionResponse\"\0\x12S\n\x12ExecuteTransaction\x12\x1c.p\
    rotobuf.TransactionRequest\x1a\x1d.protobuf.TransactionResponse\"\0BB\n%\
    com.bitfury.neo4j.transaction_managerB\x17TransactionManagerProtoP\x01b\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
